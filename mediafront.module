<?php
define('MEDIAFRONT_DEFAULT_WIDTH', 500);
define('MEDIAFRONT_DEFAULT_HEIGHT', 350);

// Require the filefield support file.
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'mediafront') . '/includes/mediafront.field.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'mediafront') . '/includes/mediafront.filefield.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'mediafront') . '/includes/mediafront.preset.inc';
require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'mediafront') . '/includes/mediafront.block.inc';

/**
 * Implements hook_permission().
 */
function mediafront_permission() {
  $perms = array(
    'administer mediafront' => array(
      'title' => t('Administer MediaFront'),
      'description' => t('Perform administration tasks for the MediaFront module.'),
    )
  );

  return array_merge( $perms, mediafront_preset_permission());
}

/**
 * Implements hook_menu().
 */
function mediafront_menu() {

  // Gets a JSON playlist for any view.
  $items['mediafront_getplaylist'] = array(
    'page callback' => 'mediafront_get_playlist_json',
    'type' => MENU_CALLBACK,
    'page arguments' => array(1, 2, 3),
    'access arguments' => array('access content')
  );

  $items = array_merge($items, mediafront_preset_menu());

  return $items;
}

/**
 * Implements hook_theme().
 */
function mediafront_theme() {
  $theme = array();
  $theme['mediafront_player'] = array(
    'render element' => 'element',
    'arguments' => array('element' => NULL)
  );
  $theme['mediafront_field'] = array(
    'render element' => 'element',
    'arguments' => array('entity' => NULL, 'preset' => NULL)
  );
  return $theme;
}

/**
 * Implement the theme for the media player.
 */
function theme_mediafront_player($variables) {

  // Get the correct variables.
  $variables = !empty($variables['element']) ? array_shift($variables) : $variables;

  // Get the entity and preset.
  $entity = $variables['#entity'];
  $preset = $variables['#preset'];
  $params = array('nodeObj' => mediafront_get_media($entity, $variables['#media_field'], $variables['#preview_field']));

  // Also set the nodeId for those who cannot just use the object.
  $params['node'] = $entity->nid;

  // Nodes will never need the playlist.
  $params['disablePlaylist'] = true;

  // Return the player.
  return mediafront_get_player($preset, $params);
}

/**
 * Implement the theme for a view field media player.
 */
function theme_mediafront_field( $variables ) {
  $entity = $variables['entity'];
  $preset = $variables['preset'];
  $params['nodeObj'] = (array)$entity;
  if( isset($entity->nid) ) {
    $params['node'] = $entity->nid;
  }
  $params['disablePlaylist'] = true;
  return mediafront_get_player($preset, $params);
}

/**
 * Implementation of hook_features_api()
 *
 */
function mediafront_features_api() {
  return array(
    'mediafront' => array(
      'name' => t('MediaFront Presets'),
      'default_hook' => 'mediafront_default_presets',
      'file' => drupal_get_path('module', 'mediafront') .'/includes/mediafront.features.inc',
    ),
  );
}

/**
 * Implements hook_views_api().
 *
 * This one is used as the base to reduce errors when updating.
 */
function mediafront_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'mediafront') .'/views',
  );
}

/**
 * Returns a list of all available players.
 */
function mediafront_get_players() {
  $return = array();
  foreach (module_implements('player_info') as $name) {
    $function = $name .'_player_info';
    $return = array_merge($return, $function());
  }
  return $return;
}

/**
 * Returns the player's default parameters.
 * @param $player
 */
function mediafront_get_player_params( $player ) {
  $get_params = $player . '_get_player_params';
  if( function_exists( $get_params ) ) {
    return $get_params();
  }
  return array();
}

/**
 * Returns the player's default settings.
 * @param $player
 */
function mediafront_get_player_settings( $player ) {
  $get_settings = $player . '_get_player_settings';
  if( function_exists( $get_settings ) ) {
    return $get_settings();
  }
  return array();
}

/**
 * Returns ALL the player settings for the given player provided settings to override.
 */
function mediafront_get_settings($player, $overrides = array()) {
  $settings = array_merge(mediafront_get_player_params($player), mediafront_get_player_settings($player));
  return $overrides ? array_merge($settings, $overrides) : $settings;
}

/**
 * Gets a playlist in JSON format.
 */
function mediafront_get_playlist_json($playlist = null, $limit = null, $start = null) {

  // Get the playlist.
  $playlist = $playlist ? check_plain($playlist) : '';
  $playlist = !empty($_GET['playlist']) ? check_plain($_GET['playlist']) : $playlist;

  // Get the limit.
  $limit = $limit ? check_plain($limit) : 10;
  $limit = !empty($_GET['max-results']) ? check_plain($_GET['max-results']) : $limit;

  // Get the start index.
  $start = $start ? check_plain($start) : 0;
  $start = !empty($_GET['start-index']) ? check_plain($_GET['start-index']) : $start;

  // Output the playlist as JSON.
  drupal_json_output(mediafront_get_playlist($playlist, $limit, $start));
}

/**
 * Gets a playlist
 */
function mediafront_get_playlist($playlist, $limit = 10, $start = 0) {
  // Get the views object.
  $view = views_get_view($playlist);
  if (empty($view)) {
    return array('error' => 'Playlist not found.');
  }

  // Check access
  if (!$view->access('default')) {
    return array('error' => 'Access Denied.');
  }

  // Setup our view for query.
  if (method_exists($view, 'set_use_pager')) {
    $view->set_use_pager(FALSE);
  }
  else {
    $view->display_handler->set_option('pager', array(
      'type' => 'some',
      'options' => $view->display_handler->options['pager']['options'],
    ));
  }

  $view->set_items_per_page($limit);
  $view->set_offset($start);
  $view->get_total_rows = TRUE;
  $view->execute();

  // Return our playlist...
  return mediafront_get_playlist_from_view($view, $limit, $start);
}

/**
 * Returns a media node provided a row and options.
 */
function mediafront_get_media_node($fields, $row) {
  $node = array();

  if (isset($fields['title'])) {
    $node['title'] = $fields['title']['field']->get_value($row);
  }
  if (isset($fields['image'])) {
    $options = $fields['image']['options'];
    $file = $fields['image']['field']->get_value($row);
    $file = $file[0];
    if (($options['preview'] == 'mediafront_original') || ($options['thumbnail'] == 'medifaront_original')) {
      $media_file = new MediaFile($file);
      $node['mediafiles']['image']['image'] = $media_file;
    }
    if (!empty($options['preview'])) {
      $media_file = new MediaFile($file);
      $media_file->path = image_style_url($options['preview'], $media_file->file->uri);
      $node["mediafiles"]['image']['preview'] = $media_file;
    }
    if (!empty($options['thumbnail'])) {
      $media_file = new MediaFile($file);
      $media_file->path = image_style_url($options['thumbnail'], $media_file->file->uri);
      $node["mediafiles"]['image']['thumbnail'] = $media_file;
    }
  }
  if (isset($fields['media'])) {
    $options = $fields['media']['options'];
    $file = $fields['media']['field']->get_value($row);
    $file = new MediaFile($file[0]);
    $node['mediafiles']['media'][$options['media_type']] = $file;
  }

  return $node;
}

/**
 * Returns a playlist provided a view.
 */
function mediafront_get_playlist_from_view($view, $limit = 10, $start = 0) {

  // Create our playlist array.
  $playlist = array();
  $playlist['nodes'] = array();
  $playlist['name'] = $view->name;

  // Get the endpoint for this view.
  $endpoint = 'mediafront_getplaylist/' . $view->name;
  $playlist['endpoint'] = url($endpoint, array('absolute' => TRUE));

  $playlist['total_rows'] = $view->total_rows ? $view->total_rows : ($view->query->pager ? $view->query->pager->get_total_items() : 0);
  $playlist['total_rows'] += $start;

  // Iterate through each field and add the configuration.
  $fields = array();
  foreach ($view->field as $name => $field) {
    $options = !empty($field->options['mediafront']) ? $field->options['mediafront'] : array();
    if (!empty($options['field_type'])) {
      $fields[$options['field_type']] = array(
        'field' => $field,
        'options' => $options
      );
    }
  }

  // Only continue if there are fields.
  if ($fields) {

    // Iterate through all the results.
    foreach ($view->result as $row) {

      // Add this as a playlist node.
      if ($node = mediafront_get_media_node($fields, $row)) {

        // Add this node.
        $playlist['nodes'][] = $node;
      }
    }
  }

  // Return the playlist.
  return $playlist;
}

/**
 * Define the preset form selection.
 */
function mediafront_preset_select_form($default, $key = 'mediafront_preset') {
  $presets = mediafront_preset_get_presets();
  $options = array();
  foreach( $presets as $preset ) {
    $options[$preset['name']] = $preset['name'];
  }
  return array(
    '#type' => 'select',
    '#title' => t('MediaFront Presets'),
    '#options' => $options,
    '#default_value' => isset($default[$key]) ? $default[$key] : '',
  );
}

/**
 * Returns the media field form.
 *
 * @param type $default
 * @return type
 */
function mediafront_media_field_form($default = 'media') {

  // Add our description for the media.
  $description = t('Select how you would like to use this file field for MediaFront.');
  $description .= '<br/>';
  $description .= '<ul>';
  $description .= '<li><strong>' . t('Introduction') . '</strong>: ' . t('This selection will make this file field be used as an introduction, before the commercial') . '</li>';
  $description .= '<li><strong>' . t('Commercial') . '</strong>: ' . t('To use this file field as the commercial for this media type') . '</li>';
  $description .= '<li><strong>' . t('Pre-Reel') . '</strong>: ' . t('The pre-reel is shown right before the main media content, but after the commercial.') . '</li>';
  $description .= '<li><strong>' . t('Media Content') . '</strong>: ' . t('The media content is the main media piece to be played to the user.') . '</li>';
  $description .= '<li><strong>' . t('Post-Reel') . '</strong>: ' . t('The post-reel is shown right after the main media content.') . '</li>';
  $description .= '</ul>';

  // Select the media type for the media.
  return array(
    '#type' => 'select',
    '#title' => t('Media Type'),
    '#description' => $description,
    '#default_value' => $default,
    '#options' => array(
      0 => t('None'),
      'intro' => t('Introduction'),
      'commercial' => t('Commercial'),
      'prereel' => t('Pre-Reel'),
      'media' => t('Media Content'),
      'postreel' => t('Post-Reel')
    ),
  );
}

/**
 * Returns the preview image field form.
 */
function mediafront_preview_field_form($preview_default = 'mediafront_original', $thumb_default = 'mediafront_original') {
  $form = array();

  // Get all of the image styles.
  $styles = image_styles();
  $options = array();
  $options[0] = t('None');
  $options['mediafront_original'] = t('Original Image');
  foreach( $styles as $name => $style ) {
    $options[$name] = $style['name'];
  }

  // Our description for each select.
  $description = t('Select the Image style that you would like to use for this MediaFront display.');

  // Add the preview style selection.
  $form['preview'] = array(
    '#type' => 'select',
    '#title' => t('Preview Style'),
    '#description' => $description,
    '#options' => $options,
    '#default_value' => $preview_default,
  );

  // Add the thumbnail style selection.
  $form['thumbnail'] = array(
    '#type' => 'select',
    '#title' => t('Thumbnail Style'),
    '#description' => $description,
    '#options' => $options,
    '#default_value' => $thumb_default,
  );

  return $form;
}

/**
 * Returns the image path for a media object.
 *
 * @return array
 */
function mediafront_get_media_preview($media) {
  if (($media->class == 'media') && module_exists('media')) {
    $preview = media_get_thumbnail_preview($media->file);
    if ($preview) {
      $preview['#file'] = (object)$preview['#file'];
      $markup = drupal_render($preview);
      $matches = array();
      preg_match('/img.*src\=\"(.*)\"/U', $markup, $matches);
      if (!empty($matches[1])) {
        $preview = new MediaFile($matches[1]);
        if ($preview->class == 'image') {
          return $preview;
        }
      }
    }
  }
  return '';
}

/**
 * Populates the node media provided a field value.
 *
 * @param type $entity
 * @param type $value
 */
function mediafront_add_field_value(&$node, $value) {

  // If this value was added.
  $added = false;

  // The media file object.
  $media = NULL;

  // If this is a text value.
  if (!empty($value['value'])) {
    $media = new MediaFile($value['value']);
  }

  // If this is a file.
  else if (!empty($value['fid'])) {
    if (!empty($value['data'])) {
      $media = new MediaFile($value['data']);
      if ($preview = mediafront_get_media_preview($media)) {
        $node["mediafiles"]['image']['preview'] = new MediaFile($preview);
      }
    }
    else if (!empty($value['filename'])) {
      $media = new MediaFile($value);
    }
    else {
      $media = new MediaFile(file_load($value['fid']));
      if ($preview = mediafront_get_media_preview($media)) {
        $node["mediafiles"]['image']['preview'] = new MediaFile($preview);
      }
    }
  }

  // Get the translated media file.
  if ($media && $media->class && $media->mediaType) {
    if (($media->mediaType != "image") && isset($node["mediafiles"][$media->class][$media->mediaType])) {
      $media = $node["mediafiles"][$media->class][$media->mediaType];
      $files = is_array($media) ? $media : array($media);
      array_push($files, $media);
      $node["mediafiles"][$media->class][$media->mediaType] = $files;
      $added = true;
    }
    else {
      $node["mediafiles"][$media->class][$media->mediaType] = $media;
      $added = true;
    }
  }

  return $added;
}

/**
 * Populates all the field values onto a node reference.
 *
 * @param type $node
 * @param type $entity
 * @param type $field_name
 */
function mediafront_add_field_values(&$node, $entity, $field_name) {
  $added = false;

  // Get the values.
  $items = field_get_items('node', $entity, $field_name);

  // Iterate through the media.
  foreach ($items as $item) {

    // Add this media to the node object.
    $added |= mediafront_add_field_value($node, $item);
  }

  // Return if it was added.
  return $added;
}

/**
 * Provided an entity, media field, and preview field, this retrieves the
 * mediafiles.
 *
 * @param {object} entity The entity to search.
 * @param {array} media The media field name.
 * @param {array} preview The preview field name.
 * @return {array} The media node object.
 */
function mediafront_get_media($entity, $media, $preview) {

  // Create our node object.
  $node = array();

  // Add the media field values.
  if (!mediafront_add_field_values($node, $entity, $media)) {

    // If none was added, then just add the raw value.
    if ($items = field_get_items('node', $entity, $media)) {
      $node["mediafiles"]["media"]["media"] = new MediaFile(array(
        'path' => $items[0]['value']
      ));
    }
  }

  // Add the preview field values.
  if (!mediafront_add_field_values($node, $entity, $preview)) {

    // If none was added, then just add the raw value.
    if ($items = field_get_items('node', $entity, $preview)) {
      $node["mediafiles"]["image"]["image"] = new MediaFile(array(
        'path' => $items[0]['value']
      ));
    }
  }

  // Add the node ID and title if media exists.
  if ($node) {
    $node['nid'] = $entity->nid;
    $node['title'] = $entity->title;
  }

  // Return the node object.
  return $node;
}

/**
 * Returns a media player.
 *
 * @param - This can either be an associative array with the settings,
 *          or can be the preset string followed by another argument that
 *          is the associative array with the settings you wish to override for
 *          that preset.
 *
 * Example: To show the player with settings...
 *
 *          $params['playlist'] = 'videos';
 *          print mediafront_get_player( $params );
 *
 * Example: To show the player with the 'mypreset' preset.
 *
 *          print mediafront_get_player( 'mypreset' );
 *
 * Example: To show the player with the 'mypreset' with the settings overrides.
 *
 *          $params['playlist'] = 'videos';
 *          print mediafront_get_player( 'mypreset', $params );
 *
 */
function mediafront_get_player() {
  $args = func_get_args();
  $params = $args[0];

  // If they pass in a string, then this is a preset.
  // get the preset values.
  if (gettype($params) == 'string') {
    $preset = mediafront_get_preset($params, (is_array($params) && !empty($params['admin'])));
    $params = isset($args[1]) ? $preset['settings'] ? array_merge($preset['settings'], $args[1]) : $args[1] : $preset['settings'];
    $params['preset'] = $preset['name'];
    $params['player'] = $preset['player'];
    $params['protocol'] = 'json';
    $params['connect'] = (isset($params['connect']) && $params['connect']) ? $params['connect'] : $preset['connect'];
    $params['id'] = (isset($params['id']) && $params['id']) ? $params['id'] : 'mediafront_' . $preset['name'];
  }

  if ($params && is_array($params)) {
    $params = mediafront_get_settings($params['player'], $params);
    $player = ($params && $params['player']) ? $params['player'] : 'osmplayer';
    $getPlayer = $player . '_get_player';
    return function_exists($getPlayer) ? $getPlayer($params) : t('Player not available');
  }
  else {
    return t('Player not available');
  }
}
?>
