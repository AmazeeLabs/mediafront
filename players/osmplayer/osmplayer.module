<?php

// Open Standard Media Player:  Provides the osmplayer functionality to the MediaFront module.
// require_once( drupal_get_path('module', 'osmplayer') . '/player/OSMPlayer.php' );

/**
 * Implements hook_get_player()
 */
function osmplayer_get_player($params) {
  $template = (isset($params['template']) && $params['template']) ? $params['template'] : "default";
  $showPlayer = isset($params['showWhenEmpty']) ? $params['showWhenEmpty'] : TRUE;

  // Always show the player when viewing through the admin interface.
  $showPlayer |= !empty($params['admin']);

  // If they provide the playlist object, encode it as JSON.
  if (isset($params['playlistObj']) && $params['playlistObj']) {
    $showPlayer |= ( $params['playlistObj']['total_rows'] > 0);
    $params['playlist'] = drupal_json_encode($params['playlistObj']);
  }
  else {
    $showPlayer |= isset($params['playlist']) && $params['playlist'];
  }

  // If they provide the node object, encode it as JSON.
  if (isset($params['nodeObj']) && $params['nodeObj']) {
    $showPlayer |= isset($params['nodeObj']['mediafiles']) && (count($params['nodeObj']['mediafiles']) > 0);
    $params['node'] = drupal_json_encode($params['nodeObj']);
  }
  else {
    $showPlayer |= isset($params['node']) && $params['node'];
  }

  // Show the player.
  return $showPlayer ? theme('osmplayer_' . $params['template'], array('params' => $params)) : '';
}

/**
 * Implements hook_library
 */
function osmplayer_library() {

  // Get the osmplayer path.
  $path = drupal_get_path('module', 'osmplayer') . '/player';
  $libraries = array(
    'minplayer' => array(
      'title' => 'minPlayer',
      'version' => '0.1',
      'js' => array(
        $path . '/minplayer/bin/minplayer.compressed.js' => array('group' => JS_LIBRARY)
      ),
      'dependencies' => array(
        array('system', 'ui.slider'),
      )
    ),
    'minplayer_debug' => array(
      'title' => 'minPlayer (Debug Mode)',
      'version' => '0.1',
      'js' => array(
        $path . '/minplayer/src/minplayer.compatibility.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.flags.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.async.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.plugin.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.display.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.image.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.file.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.playLoader.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.players.base.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.players.html5.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.players.flash.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.players.minplayer.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.players.youtube.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.players.vimeo.js' => array('group' => JS_LIBRARY),
        $path . '/minplayer/src/minplayer.controller.js' => array('group' => JS_LIBRARY)
      ),
      'dependencies' => array(
        array('system', 'ui.slider')
      )
    ),
    'osmplayer' => array(
      'title' => 'OSM Player',
      'version' => '0.1',
      'js' => array(
        $path . '/bin/osmplayer.compressed.js' => array('group' => JS_LIBRARY)
      ),
      'dependencies' => array(
        array('osmplayer', 'minplayer')
      )
    ),
    'osmplayer_debug' => array(
      'title' => 'OSM Player (Debug Mode)',
      'version' => '0.1',
      'js' => array(
        $path . '/src/osmplayer.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.parser.default.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.parser.youtube.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.parser.rss.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.parser.asx.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.parser.xspf.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.playlist.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.scroll.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.pager.js' => array('group' => JS_LIBRARY),
        $path . '/src/osmplayer.teaser.js' => array('group' => JS_LIBRARY),
      ),
      'dependencies' => array(
        array('osmplayer', 'minplayer_debug')
      )
    )
  );

  // Add all of the templates to the libraries.
  $templates = osmplayer_get_templates();
  foreach ($templates as $template => $info) {
    $libraries['osmplayer_' . $template] = array(
      'title' => 'OSM Player (' . $template . ')',
      'version' => '0.1',
      'js' => $info['js'],
      'css' => $info['css'],
      'dependencies' => array(
        array('osmplayer', 'osmplayer')
      )
    );
    $libraries['osmplayer_' . $template . '_debug'] = array(
      'title' => 'OSM Player (' . $template . '): Debug',
      'version' => '0.1',
      'js' => $info['js'],
      'css' => $info['css'],
      'dependencies' => array(
        array('osmplayer', 'osmplayer_debug')
      )
    );
  }

  return $libraries;
}

/**
 * Returns the path to the OSM Player.
 */
function osmplayer_get_path() {
  return drupal_get_path('module', 'osmplayer') . '/player';
}

/**
 * Implements hook_player_info()
 */
function osmplayer_player_info() {
  $info = array();
  $info['osmplayer'] = array(
    'title' => 'Open Standard Media Player',
    'description' => 'An Open Source - Open Standard, full featured media player.'
  );
  return $info;
}

/**
 * Implements hook_theme()
 */
function osmplayer_theme() {
  $templates = osmplayer_get_templates();
  $themes = array();
  $path = osmplayer_get_path() . '/templates';
  $minplayer_path = osmplayer_get_path() . '/minplayer/templates';
  foreach ($templates as $template => $info) {
    $template_path = ($path . '/' . $template);
    $themes['osmplayer_' . $template] = array(
      'template' => 'osmplayer_' . $template,
      'variables' => array('params' => NULL, 'templates' => NULL),
      'path' => $template_path,
      'preprocess functions' => array('template_preprocess_osmplayer')
    );

    $template_path = ($minplayer_path . '/' . $template);
    $themes['minplayer_' . $template] = array(
      'template' => 'minplayer_' . $template,
      'variables' => array('params' => NULL, 'templates' => NULL),
      'path' => $template_path
    );
  }
  return $themes;
}

/**
 * Implements hook_get_player_settings
 *
 * These are the settings that the module implements...
 */
function osmplayer_get_player_settings() {
  return array(
    'theme' => 'dark-hive',
    'template' => 'default',
    'showWhenEmpty' => TRUE,
    'disablePlaylist' => FALSE,
    'playlistOnly' => FALSE,
    'showController' => TRUE,
    'controllerOnly' => FALSE,
  );
}

/**
 *  Implements hook_get_player_params.
 *
 *  These are the parameters that the player requires...
 */
function osmplayer_get_player_params() {
  return array(
    'id' => 'player',
    'debug' => false,
    'volume' => 80,
    'wmode' => 'transparent',
    'preload' => TRUE,
    'autoplay' => FALSE,
    'autoLoad' => TRUE,
    'scrollMode' => 'auto',
    'scrollSpeed' => 20,
    'showPlaylist' => TRUE,
    'vertical' => TRUE,
    'playlist' => '',
    'pageLimit' => 10,
    'autoNext' => TRUE,
    'shuffle' => FALSE,
    'loop' => FALSE,
    'logo' => '/' . osmplayer_get_path() . '/logo.png',
    'link' => 'http://www.mediafront.org',
    'width' => '100%',
    'height' => '450px'
  );
}

/**
 * Implements hook_player_settings_form
 */
function osmplayer_player_settings_form($preset) {

  // Get the player templates.
  $templates = osmplayer_get_templates();
  $templates = array_keys($templates);
  $templates = array_combine($templates, $templates);

  // Get the themes.
  $themes = osmplayer_get_themes();
  $themes = array_keys($themes);
  $themes = array_combine($themes, $themes);

  $form['presentation'] = array(
    '#type' => 'fieldset',
    '#title' => t('Presentation Settings'),
    '#weight' => -10,
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['presentation']['theme'] = array(
    '#type' => 'select',
    '#title' => t('Theme'),
    '#description' => t('Select the theme you would like to use for this player.  The theme provides the look and feel for the media player.  Select <strong>&lt;none&gt;</strong> if you would not like to use a theme.<br/>You can download new themes for the OSM Player using the jQuery UI <a target="_blank" href="http://jqueryui.com/themeroller">JQuery UI ThemeRoller</a> interface.  Once you have downloaded a new theme, simply place the contents of that download in the <strong>modules/mediafront/players/osmplayer/player/jquery-ui</strong> folder.  Once you refresh the browser, you should see your new theme show up in this list.<br/><br/><strong>IMPORTANT NOTE:  You cannot have more than one theme present on a page at any given time.  This will cause the themes to override one other causing issues.</strong>'),
    '#options' => array_merge(array('none' => t('<none>')), $themes),
    '#default_value' => $preset['settings']['theme']
  );
  $form['presentation']['template'] = array(
    '#type' => 'select',
    '#title' => t('Template'),
    '#description' => t('Select the template you would like to use for this player.  The template provides specific functionality as well as the layout for the media player.  Each template can be found in the <strong>modules/mediafront/players/osmplayer/player/templates</strong> folder.'),
    '#options' => $templates,
    '#default_value' => $preset['settings']['template']
  );
  $form['presentation']['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Width'),
    '#description' => t('Enter the width of the player.'),
    '#default_value' => $preset['settings']['width']
  );
  $form['presentation']['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Player Height'),
    '#description' => t('Enter the height of the player.'),
    '#default_value' => $preset['settings']['height']
  );
  $form['presentation']['showWhenEmpty'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show player when empty'),
    '#description' => t('Check if you would like to show the player even if there is nothing to play'),
    '#default_value' => $preset['settings']['showWhenEmpty']
  );
  $form['presentation']['wmode'] = array(
    '#title' => t('Flash Window Mode'),
    '#type' => 'select',
    '#options' => array('none' => 'none', 'transparent' => 'transparent', 'window' => 'window'),
    '#default_value' => $preset['settings']['wmode'],
    '#description' => t('Selects which window mode you would like for the OSM Flash player to operate under (denoted by the <b>wmode</b> parameter in the object code)
         <ul>
            <li><b>none</b> - <em>No window mode</em></li>
            <li><b>wmode=transparent</b> - <em>Allows for other elements to drop in front of the video (like a drop-down list), without the video showing over those elements.</em></li>
            <li><b>wmode=window</b> - <em>Allows for the video to have full-screen support.</em></li>
         </ul>')
  );

  $form['media_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Media Settings'),
    '#weight' => -9,
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['media_settings']['volume'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Volume'),
    '#description' => t('Enter the initial volume for the player.'),
    '#default_value' => $preset['settings']['volume']
  );
  $form['media_settings']['autoplay'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Start'),
    '#description' => t('If checked, the media will automatically load and play once the page loads.'),
    '#default_value' => $preset['settings']['autoplay']
  );
  $form['media_settings']['autoLoad'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Load'),
    '#description' => t('If checked, the media will automatically start loading once the page loads.'),
    '#default_value' => $preset['settings']['autoLoad']
  );

  /*   * *********************** PLAYLIST SETTINGS ************************************ */
  $form['playlist_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Playlist Settings'),
    '#weight' => -8,
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['playlist_settings']['scrollSettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Scroll Settings'),
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['playlist_settings']['scrollSettings']['scrollMode'] = array(
    '#type' => 'select',
    '#title' => t('Scroll Mode'),
    '#options' => array('auto' => 'Auto Scroll', 'mouse' => 'Mouse Scroll', 'hover' => 'Hover Scroll', 'span' => 'Span Scroll', 'none' => 'No Scroll'),
    '#description' => t('Specify how you would like the playlist to scroll.
      <ul>
        <li><strong>Auto Scroll</strong> - <em>Make the playlist scroll follow the mouse movements</em></li>
      </ul>'),
    '#default_value' => $preset['settings']['scrollMode']
  );
  $form['playlist_settings']['scrollSettings']['scrollSpeed'] = array(
    '#type' => 'textfield',
    '#title' => t('Scroll Speed'),
    '#description' => t('The speed which the playlist scrolls.'),
    '#default_value' => $preset['settings']['scrollSpeed']
  );
  $form['playlist_settings']['displaySettings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Display Settings'),
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['playlist_settings']['displaySettings']['disablePlaylist'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable Playlist'),
    '#description' => t('Will completely remove the playlist funcitonality.'),
    '#default_value' => $preset['settings']['disablePlaylist']
  );
  $form['playlist_settings']['displaySettings']['showPlaylist'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Playlist'),
    '#description' => t('Select if you would like to see the playlist by default. ( They can then see the playlist my pressing the maximize button )'),
    '#default_value' => $preset['settings']['showPlaylist']
  );
  $form['playlist_settings']['displaySettings']['playlistOnly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Playlist Only'),
    '#description' => t('Select if you would like to ONLY see the playlist.'),
    '#default_value' => $preset['settings']['playlistOnly']
  );
  $form['playlist_settings']['displaySettings']['vertical'] = array(
    '#type' => 'select',
    '#title' => t('Playlist Orientation'),
    '#options' => array(false => 'Horizontal', true => 'Vertical'),
    '#description' => t('Selecting this will orient the playist either vertical or horizontal.  Note - This will only work if your template supports it.'),
    '#default_value' => $preset['settings']['vertical']
  );
  $form['playlist_settings']['playlist'] = array(
    '#type' => 'textfield',
    '#title' => t('Default Playlist'),
    '#description' => t('Enter the name or the URL of the playlist you would like to load by default.  This can either be an external XML file, or the name of the view that represents your playlist.  This, however, will be overridden if you explicitly provide the playlist when adding this preset to a page.'),
    '#default_value' => $preset['settings']['playlist']
  );
  $form['playlist_settings']['pageLimit'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Limit'),
    '#description' => t('Specify how many nodes you would like to show in each page of the playlist.'),
    '#default_value' => $preset['settings']['pageLimit']
  );
  $form['playlist_settings']['autoNext'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Next'),
    '#description' => t('Specify if you would the player to automatically move to the next node after the previous one finishes playing.'),
    '#default_value' => $preset['settings']['autoNext']
  );
  $form['playlist_settings']['shuffle'] = array(
    '#type' => 'checkbox',
    '#title' => t('Shuffle'),
    '#description' => t('If checked, the playlist will play in a random order.'),
    '#default_value' => $preset['settings']['shuffle']
  );
  $form['playlist_settings']['loop'] = array(
    '#type' => 'checkbox',
    '#title' => t('Loop'),
    '#description' => t('If checked, the media playlist will play over once it has been completed.  This also applies if there is only a single media being played.'),
    '#default_value' => $preset['settings']['loop']
  );

  $form['control_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Controller Settings'),
    '#weight' => -6,
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['control_settings']['showController'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Controller'),
    '#description' => t('Unchecking this will hide the control bar.'),
    '#default_value' => $preset['settings']['showController']
  );
  $form['control_settings']['controllerOnly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Controller Only'),
    '#description' => t('Select if you would like to ONLY see the control bar.'),
    '#default_value' => $preset['settings']['controllerOnly']
  );

  $form['logo_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Logo Settings'),
    '#weight' => -4,
    '#collapsible' => true,
    '#collapsed' => true
  );
  $form['logo_settings']['logo'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo URL'),
    '#description' => t('Enter the relative location of your logo with respect to the Drupal root location.'),
    '#default_value' => $preset['settings']['logo']
  );
  $form['logo_settings']['link'] = array(
    '#type' => 'textfield',
    '#title' => t('Link URL'),
    '#description' => t('Enter the website that the logo points to.'),
    '#default_value' => $preset['settings']['link']
  );

  $form['misc'] = array(
    '#type' => 'fieldset',
    '#title' => t('Other Settings'),
    '#weight' => -3,
    '#collapsible' => true,
    '#collapsed' => true
  );

  $form['misc']['debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Player Debugging'),
    '#description' => t('Select if you would like to see the debug statements from the Media Player.'),
    '#default_value' => $preset['settings']['debug']
  );
  return $form;
}

/**
 * Returns all of the google managed jquery-ui themes.
 */
function osmplayer_managed_themes() {
  return array(
    'base',
    'black-tie',
    'blizter',
    'cupertino',
    'dark-hive',
    'dot-luv',
    'eggplant',
    'excite-bike',
    'flick',
    'hot-sneaks',
    'humanity',
    'le-frog',
    'mint-choc',
    'overcast',
    'pepper-grinder',
    'redmond',
    'smoothness',
    'south-street',
    'start',
    'sunny',
    'swanky-purse',
    'trontastic',
    'ui-darkness',
    'ui-lightness',
    'vader',
  );
}

/**
 * Returns the themes available to the OSM Player.
 * @return string
 */
function osmplayer_get_themes() {

  // Get the osmplayer themes.
  $themes = &drupal_static(__FUNCTION__);
  if (!isset($themes)) {

    // See if we have cached themes.
    if ($themes = cache_get(__FUNCTION__)) {
      $themes = $themes->data;
      return $themes;
    }
    else {
      $themes = array();

      // Add all of the managed themes.
      foreach(osmplayer_managed_themes() as $theme) {
        $themes[$theme] = array(
          'url' => 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/' . $theme . '/jquery-ui.css',
          'options' => array('type' => 'external')
        );
      }

      $base_path = osmplayer_get_path() . '/minplayer/jquery-ui';
      $path = getcwd() . '/' . $base_path . '/*';

      // Iterate through our templates directory.
      foreach(glob($path, GLOB_ONLYDIR) as $dir) {
        $name = basename($dir);
        $theme_path = $base_path . '/' . $name;
        foreach (glob($dir . '/*.css') as $css) {
          $themes[$name] = array(
            'url' => $theme_path . '/' . basename($css),
            'options' => array('type' => 'file')
          );
          break;
        }
      }

      // Cache this request.
      cache_set(__FUNCTION__, $themes);
    }
  }

  return $themes;
}

/**
 * Gets the CSS and JS files within a directory.
 */
function osmplayer_get_resources($path, $base_path) {
  $resources = array();
  // Iterate through our templates directory.
  foreach(glob($path, GLOB_ONLYDIR) as $dir) {
    $name = basename($dir);
    $template_path = $base_path . '/' . $name;
    $resources[$name] = array(
      'path' => $template_path,
    );

    // Now add the js files.
    $js_files = array();
    foreach (glob($dir . '/js/*.js') as $js) {
      $js_name = basename($js);
      $js_files[$template_path . '/js/' . $js_name] = array('group' => JS_LIBRARY);
    }

    // Now get the css files.
    $css_files = array();
    foreach (glob($dir . '/css/*.css') as $css) {
      $css_name = basename($css);
      $css_files[$template_path . '/css/' . $css_name] = array('group' => CSS_DEFAULT);
    }

    // Add these to the resources array.
    $resources[$name]['js'] = $js_files;
    $resources[$name]['css'] = $css_files;
  }
  return $resources;
}

/**
 * Returns all of the osmplayer templates.
 *
 * @return string
 */
function osmplayer_get_templates() {

  // Get the osmplayer templates.
  $templates = &drupal_static(__FUNCTION__);
  if (!isset($templates)) {

    // See if we have cached themes.
    if ($templates = cache_get(__FUNCTION__)) {
      $templates = $templates->data;
      return $templates;
    }
    else {

      // Get the osmplayer templates.
      $base_path = osmplayer_get_path() . '/templates';
      $path = getcwd() . '/' . $base_path . '/*';
      $osmtemplates = osmplayer_get_resources($path, $base_path);

      // Get the minplayer templates.
      $base_path = osmplayer_get_path() . '/minplayer/templates';
      $path = getcwd() . '/' . $base_path . '/*';
      $mintemplates = osmplayer_get_resources($path, $base_path);

      $templates = array();
      foreach ($osmtemplates as $name => $resources) {
        $templates[$name] = array(
          'path' => $resources['path'],
          'css' => array_merge($mintemplates[$name]['css'], $resources['css']),
          'js' => $resources['js'],
        );
      }

      // Cache this request.
      cache_set(__FUNCTION__, $templates);
    }
  }

  // Return the templates.
  return $templates;
}

/**
 * The template preprocess function for the osm media player.
 *
 * @param $variables - The
 * @return unknown_type
 */
function template_preprocess_osmplayer(&$variables) {
  global $base_url, $user;

  // Get the params.
  $params = &$variables['params'];

  // Make sure we call the template_preprocess.
  template_preprocess($variables, 'osmplayer_' . $params['template']);

  // Add the theme css if applicable.
  $themes = osmplayer_get_themes();
  if (!empty($themes[$params['theme']])) {
    $theme = $themes[$params['theme']];
    drupal_add_css($theme['url'], $theme['options']);
  }

  // Add the library.
  $library = 'osmplayer_' . $params['template'];
  $library .= $params['debug'] ? '_debug' : '';
  drupal_add_library('osmplayer', $library);

  // Normalize the player parameters.
  $settings = array();
  $defaults = osmplayer_get_player_params();
  foreach ($params as $key => $value) {
    if (isset($defaults[$key])) {
      settype($value, gettype($defaults[$key]));
      $settings[$key] = $value;
    }
  }

  // Encode the player parameters.
  $player_params = json_encode($settings);


  // Add the osmplayer js.
  drupal_add_js('
    jQuery(function() {
      jQuery("#' . $params['id'] . '").osmplayer(' . $player_params . ');
    });
  ', 'inline');

  // Get the minplayer.
  $variables['minplayer'] = theme('minplayer_' . $params['template'], array('params' => $params));
}
